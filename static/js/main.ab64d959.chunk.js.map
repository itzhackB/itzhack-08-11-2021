{"version":3,"sources":["Redux/actions/types.js","Redux/actions/weatherActions.js","Components/Features/Card/DayCardComponent.jsx","Components/Features/WeekContainer/WeekContainer.jsx","Redux/actions/favoritesAction.js","Components/Features/Autocomplete/AutocompleteComponent.jsx","Components/Pages/Home/HomeComponent.jsx","Components/Pages/Favorites/FavoritesComponent.jsx","Routing/Routing.jsx","Components/Features/Header/HeaderComponent.jsx","Redux/reducers/weatherRedcuer.js","Redux/reducers/locationReducer.js","Redux/reducers/favoritesReducer.js","Redux/reducers/errorReducer.js","Redux/reducers/index.js","Redux/store.js","App.js","utils/favoriteLocalStorage.js","reportWebVitals.js","index.js"],"names":["GET_CURRENT_CITY","CURRENT_CITY_WEEK_WEATHER","SET_LOCATION","ADD_FAVORITE","DELETE_FAVORITE","ADD_ERROR","DELETE_ERROR","API_KEY","process","GetdeafultCity","city","dispatch","a","axios","get","response","type","payload","data","LocalizedName","cityKey","Key","getLocationWeather","currentWeather","getWeekCurrentWeather","DailyForecasts","moment","require","DayCardComponent","day","useSelector","state","weather","current","newDate","Date","weekday","setTime","isDayTime","IsDayTime","className","Icon","format","Math","round","Temperature","Minimum","Value","IconPhrase","WeekContainer","useDispatch","weekWeather","weekly","currentLocation","location","favorites","WeatherText","some","e","id","Button","variant","onClick","name","map","index","AutocompleteComponent","useState","suggestions","setSuggestions","erros","setError","serachCity","value","target","test","fetch","then","res","json","Alert","severity","Autocomplete","size","sx","width","options","option","onChange","renderInput","params","TextField","label","key","HomeComponent","useEffect","FavoritesComponent","favoriteList","setFavoriteList","tempFavoriteList","fetchFavorites","CURRENT_URL","fav","favorite","Metric","console","log","Routing","exact","path","component","HeaderComponent","to","icon","faBell","style","color","length","weatherRedcuer","action","locationReducer","favoritesReducer","filter","Favoriteitem","errorReducer","combineReducers","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","navigator","geolocation","getCurrentPosition","lat","coords","latitude","lon","longitude","err","favoriteLocalStorage","JSON","stringify","localStorage","setItem","saveFavorites","getState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab64d959.chunk.js","sourcesContent":["export const GET_CURRENT_CITY=\"GET_CURRENT_CITY\"\r\nexport const CURRENT_CITY_WEEK_WEATHER=\"CURRENT_CITY_WEEK_WEATHER\"\r\nexport const SET_LOCATION=\"SET_LOCATION\"\r\nexport const ADD_FAVORITE=\"ADD_FAVORITE\"\r\nexport const DELETE_FAVORITE=\"DELETE_FAVORITE\"\r\nexport const ADD_ERROR=\"ADD_ERROR\"\r\nexport const DELETE_ERROR=\"DELETE_ERROR\"","import { SET_LOCATION,GET_CURRENT_CITY, CURRENT_CITY_WEEK_WEATHER } from \"./types\";\r\nimport axios from \"axios\";\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY\r\nconst autoComplelteURL = 'http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey='\r\nconst weeklyWeatherURL = \"http://dataservice.accuweather.com/forecasts/v1/daily/5day/\"\r\nconst currentURL = 'http://dataservice.accuweather.com/currentconditions/v1/'\r\nconst geoURL= process.env.REACT_APP_GEO_URL\r\n\r\nexport const GetdeafultCity = (city) => async dispatch => {\r\n    const response = await axios.get(`${autoComplelteURL}${API_KEY}&q=${city}`)\r\n    await dispatch({ type: SET_LOCATION, payload: { city: response?.data[0].LocalizedName, cityKey: response.data[0].Key } })\r\n    let cityKey = response.data[0].Key;\r\n    await dispatch(getLocationWeather(cityKey))\r\n}\r\n\r\nexport const getCityByGeo = (lat, lon) => async dispatch => {\r\n    const response = await axios.get(`${geoURL}apikey=${API_KEY}&q=${lat},${lon}`)\r\n    console.log(response);\r\n    await dispatch({ type: SET_LOCATION, payload: { city: response.data.LocalizedName, cityKey: response.data.Key } })\r\n    let cityKey = response.data.Key\r\n    await dispatch(getLocationWeather(cityKey))\r\n\r\n}\r\n\r\nexport const getLocationWeather = cityKey => async dispatch => {\r\n    await dispatch(currentWeather(cityKey))\r\n    await dispatch(getWeekCurrentWeather(cityKey))\r\n}\r\n\r\nexport const currentWeather = cityKey => async dispatch => {\r\n    const response = await axios.get(`${currentURL}${cityKey}?apikey=${API_KEY}`)\r\n    await dispatch({ type: GET_CURRENT_CITY, payload: response.data[0] })\r\n\r\n}\r\n\r\n\r\nexport const getWeekCurrentWeather = cityKey => async dispatch => {\r\n    const response = await axios.get(`${weeklyWeatherURL}${cityKey}?apikey=${API_KEY}`)\r\n    await dispatch({ type: CURRENT_CITY_WEEK_WEATHER, payload: response.data.DailyForecasts })\r\n\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nvar moment = require('moment');\r\n\r\nconst DayCardComponent = ({ day }) => {\r\n    const currentWeather = useSelector((state) => state.weather.current)\r\n\r\n    let newDate = new Date();\r\n    const weekday = day.Date * 1000\r\n    newDate.setTime(weekday)\r\n\r\n    const isDayTime = currentWeather.IsDayTime ? 'Day' : 'Night'\r\n    return (\r\n        \r\n            <div className=\"col-sm-2\">\r\n                <div className=\"card\">\r\n                    <p className=\"card-title\"><i className={`wi icon-accu${day[isDayTime].Icon}`}></i></p>\r\n                    <p className=\"text-muted\">{moment(day.Date).format('ddd')}</p>\r\n                    <h2>{Math.round(day.Temperature.Minimum.Value)} °F</h2>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\">{day[isDayTime].IconPhrase}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default DayCardComponent\r\n","import React, { useEffect } from 'react'\r\nimport DayCardComponent from '../Card/DayCardComponent'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { addFavorite, deleteFavorite } from '../../../Redux/actions/favoritesAction';\r\nimport Button from '@mui/material/Button';\r\n\r\nconst WeekContainer = () => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const weekWeather = useSelector((state) => state.weather.weekly)\r\n    const currentLocation = useSelector((state) => state.location)\r\n    const currentWeather = useSelector((state) => state.weather.current)\r\n    const favorites = useSelector((state) => state.favorites)\r\n\r\n\r\n    const checkIfFavorite = () => {\r\n        if (favorites.some(e => e.id === currentLocation.cityKey)) {\r\n            return true\r\n        }\r\n        else {\r\n            return false\r\n        }\r\n    }\r\n    return (\r\n\r\n        <div className=\"container\">\r\n\r\n            <h5 className=\"display-5 text-muted\">{currentLocation.city}</h5>\r\n            <h5 className=\"display-5 text-muted\">{currentWeather.WeatherText}</h5>\r\n            {/* <h5 className=\"display-5 text-muted\">{currentWeather?.Temperature.Metric?.Value}</h5> */}\r\n            {checkIfFavorite() ? <Button variant=\"outlined\" onClick={() => dispatch(deleteFavorite(currentLocation.cityKey))}>Unsubscribe</Button>\r\n                : <Button variant=\"outlined\" onClick={() => dispatch(addFavorite(currentLocation.cityKey, currentLocation.city))}>Subscribe</Button>\r\n            }\r\n            <h1 className=\"display-4 jumbotron\">5-Day Forecast.</h1>\r\n            <div className=\"row justify-content-center\">\r\n\r\n                {weekWeather.map((day, index) => {\r\n                    return <DayCardComponent day={day} index={index} />\r\n                })}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeekContainer\r\n","import { ADD_FAVORITE, DELETE_FAVORITE } from \"./types\"\r\n\r\nexport const addFavorite = (id, name) => {\r\n    return {\r\n        type: ADD_FAVORITE,\r\n        payload: {\r\n            id: id,\r\n            name: name\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteFavorite = id => {\r\n    return {\r\n        type: DELETE_FAVORITE,\r\n        payload: id\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport { GetdeafultCity } from '../../../Redux/actions/weatherActions';\r\nimport Alert from '@mui/material/Alert';\r\n\r\n\r\n\r\nconst AutocompleteComponent = (e) => {\r\n    const dispatch = useDispatch()\r\n    const autoCompleteURL = process.env.REACT_APP_AUTOCOMPLETE_URL\r\n    const api_key = process.env.REACT_APP_API_KEY\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [erros, setError] = useState(true)\r\n\r\n    const serachCity = (e) => {\r\n        let value = e.target.value\r\n        let english = /[^A-Za-z]/ig\r\n\r\n        if (!english.test(value)) {\r\n            setError(true)\r\n            fetch(`${autoCompleteURL}${api_key}&q=${value}`)\r\n                .then((res) => res.json())\r\n                .then((response) => setSuggestions(response))\r\n\r\n        }\r\n        else {\r\n            setError(false)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"autoComplete\">\r\n            {erros ? \"\" : <Alert severity=\"error\">English letters only.</Alert>}\r\n\r\n            <Autocomplete\r\n                id=\"free-solo-demo\"\r\n                size=\"medium\"\r\n                sx={{ width: 500 }}\r\n                options={suggestions?.map((option) => option.LocalizedName)}\r\n                onChange={(e, value) => dispatch(GetdeafultCity(value))}\r\n                renderInput={(params) =>\r\n                    <TextField onChange={serachCity} {...params} label=\"Search city\" key={params.Key} />}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AutocompleteComponent\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { GetdeafultCity, GetWeekWeather } from '../../../Redux/actions/weatherActions';\r\nimport WeekContainer from '../../Features/WeekContainer/WeekContainer';\r\nimport AutocompleteComponent from '../../Features/Autocomplete/AutocompleteComponent';\r\n\r\n\r\n\r\nconst HomeComponent = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const weather = useSelector((state) => state.weather)\r\n    const telAviv=weather?.current[0];\r\n    \r\n    useEffect(() => {\r\n        dispatch(GetdeafultCity('Tel aviv'))\r\n    }, [])\r\n\r\n \r\n    return (\r\n        <div>\r\n            <AutocompleteComponent/>\r\n            <WeekContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeComponent\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { deleteFavorite } from '../../../Redux/actions/favoritesAction'\r\nimport axios from 'axios'\r\n\r\n\r\nconst FavoritesComponent = () => {\r\n    const dispatch = useDispatch()\r\n    const favorites = useSelector((state) => state.favorites)\r\n    const [favoriteList, setFavoriteList] = useState([])\r\n\r\n    let tempFavoriteList = []\r\n\r\n    useEffect(() => {\r\n        fetchFavorites()\r\n    }, [])\r\n    const fetchFavorites = async () => {\r\n        const CURRENT_URL = process.env.REACT_APP_CURRENT_URL\r\n        const API_KEY = process.env.REACT_APP_API_KEY\r\n        for await(const fav of favorites) {\r\n            const data = await axios.get(`${CURRENT_URL}${fav.id}?apikey=${API_KEY}`)\r\n            tempFavoriteList[fav.id] = data.data[0]\r\n        }\r\n        setFavoriteList(tempFavoriteList)\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Favorites</h1>\r\n            <div className=\"favoritesContainer\">\r\n                {favorites.map((favorite, index) =>\r\n                <div\r\n                    className=\"favoritesItem\"\r\n                    key={index}>\r\n                    <p>{favorite.name}</p>\r\n                    <p>{favoriteList[favorite.id]?.WeatherText}</p>\r\n                    <p>{favoriteList[favorite.id]?.Temperature.Metric.Value}</p>\r\n                    <button\r\n                        onClick={() => console.log(favoriteList)}>\r\n                        Remove Favorite\r\n                    </button>\r\n                </div>\r\n            )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoritesComponent\r\n","import React from 'react'\r\nimport {\r\n    Route,\r\n    Switch\r\n} from \"react-router-dom\";\r\nimport HomeComponent from '../Components/Pages/Home/HomeComponent';\r\nimport FavoritesComponent from '../Components/Pages/Favorites/FavoritesComponent';\r\n\r\n\r\nconst Routing = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route exact path=\"/\"  component={HomeComponent}/>\r\n                <Route path=\"/favorites\" component={FavoritesComponent} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routing\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons'\r\nimport { color } from '@mui/system'\r\n\r\nconst HeaderComponent = () => {\r\n    const favorites = useSelector((state) => state.favorites)\r\n    return (\r\n        <div className=\"headerContainer\">\r\n            <Link to=\"/\">\r\n                <h3>Weather App</h3>\r\n            </Link>\r\n            <Link to=\"/favorites\">\r\n                <FontAwesomeIcon icon={faBell} size={\"2x\"} style={{color:\"red\"}} />\r\n                <div style={{color:'red'}}>{favorites.length}</div>\r\n            </Link>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderComponent\r\n","import { GET_CURRENT_CITY, CURRENT_CITY_WEEK_WEATHER } from \"../actions/types\";\r\n\r\nfunction weatherRedcuer(weather = { current: {}, weekly: [] }, action) {\r\n    switch (action.type) {\r\n        case GET_CURRENT_CITY:\r\n            return {\r\n                ...weather, current: action.payload\r\n            }\r\n        case CURRENT_CITY_WEEK_WEATHER:\r\n            return {\r\n                ...weather, \r\n                weekly: action.payload\r\n            }\r\n        default:\r\n            return weather;\r\n    }\r\n}\r\n\r\nexport default weatherRedcuer;","import { SET_LOCATION } from \"../actions/types\"\r\n\r\nconst locationReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case SET_LOCATION:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default locationReducer","import { ADD_FAVORITE, DELETE_FAVORITE } from \"../actions/types\";\r\n\r\nconst favoritesReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case ADD_FAVORITE:\r\n            return  [...state, action.payload]\r\n        case DELETE_FAVORITE:\r\n            return state.filter((Favoriteitem) => Favoriteitem.id !== action.payload)\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default favoritesReducer","import React from 'react'\r\nimport { ADD_ERROR, DELETE_ERROR } from '../actions/types';\r\n\r\nconst errorReducer = (state = [], action) => {\r\n    switch (action) {\r\n        case ADD_ERROR:\r\n            return [...state, action.payload]\r\n        case DELETE_ERROR:\r\n            state = []\r\n            return;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default errorReducer\r\n","import { combineReducers } from \"redux\";\r\nimport weatherRedcuer from \"./weatherRedcuer\";\r\nimport locationReducer from \"./locationReducer\";\r\nimport favoritesReducer from \"./favoritesReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\n\r\n\r\nexport default combineReducers({\r\n    weather: weatherRedcuer,\r\n    location: locationReducer,\r\n    favorites: favoritesReducer,\r\n    errors: errorReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\n\r\nconst store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n))\r\n\r\nexport default store;","import React, { useEffect } from 'react';\nimport './App.css';\nimport Routing from './Routing/Routing';\nimport HeaderComponent from './Components/Features/Header/HeaderComponent';\nimport { Provider, useDispatch } from 'react-redux'\nimport store from './Redux/store'\nimport { GetdeafultCity } from '../src/Redux/actions/weatherActions'\nimport { saveFavorites } from '../src/utils/favoriteLocalStorage'\nimport { getCityByGeo } from '../src/Redux/actions/weatherActions'\n\n\nfunction App() {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      location => dispatch(getCityByGeo(location.coords.latitude, location.coords.longitude)),\n      err => {\n        dispatch(GetdeafultCity('Tel Aviv'))\n      }\n    )\n    saveFavorites(store.getState.favorites)\n    dispatch(GetdeafultCity('Tel aviv'))\n    console.log(process.env.PUBLIC_URL);\n  }, [])\n\n  return (\n    <div className=\"App\">\n        <HeaderComponent />\n        <Routing />\n    </div>\n  );\n}\n\nexport default App;\n","\r\nexport const loadFavorites = () => {\r\n    \r\n    try {\r\n        const favoriteLocalStorage = localStorage.getItem('favorites')\r\n        if (favoriteLocalStorage === null) {\r\n            return []\r\n        }\r\n        return JSON.parse(favoriteLocalStorage)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveFavorites = (state) => {\r\n    \r\n    try {\r\n        const favoriteLocalStorage = JSON.stringify(state)\r\n        localStorage.setItem('favorites', favoriteLocalStorage)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './Redux/store'\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport { HashRouter } from 'react-router-dom';\n\n\n\n\n\n\nReactDOM.render(\n  < Provider store={store} >\n    <HashRouter>\n      <Router>\n        <App />\n      </Router>\n    </HashRouter>\n  </Provider >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}